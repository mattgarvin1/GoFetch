-- scratch note indicating how I'm approaching the problem and paths to a solution -- 

first move: define the basic data structures / JSON payloads as Go structs

also first move: write the tests 
    -> map the verbal expected behavior from the problem description to a set of unit tests 
    -> implement these unit tests
    -> clarify / understand expected behavior of the system

--

	// Q. it's definitely the case that a "new tx" could be older than an existing tx in the db
	// -- in which case you'd need to place this "new old tx" ahead of the existing db record
	// -- a dumb thing to do would be to sort the DB every time - but that's computationally sinful
	// A. don't sort the DB, and you don't need to keep it sorted
	// -- just sort unspent transactions when handling a spend request

--

/*
	Basic Considerations:
	0000. standardize variable and type naming
		-> standard JSON i/o for API , corresponding structs + scheme
	000. do all the proper HTTP business
	00. concept of user; userID; many users, ...
	0. Validating requests, payloads, missing fields, ...
	1. Defining Useful Types, Interfaces and Methods
	2. Sensible DB Definition
	3. Testing
	4. Comments
	5. Logging, Error-Handling, Warnings
	6. Docker
	7. Dependency Management - use modules, not dep
*/

----------

/*

1. call to "add transaction" route:

	{ "payer": "DANNON", "points": 1000, "timestamp": "2020-11-02T14:00:00Z" }
	{ "payer": "UNILEVER", "points": 200, "timestamp": "2020-10-31T11:00:00Z" }
	{ "payer": "DANNON", "points": -200, "timestamp": "2020-10-31T15:00:00Z" }
	{ "payer": "MILLER COORS", "points": 10000, "timestamp": "2020-11-01T14:00:00Z" }
	{ "payer": "DANNON", "points": 300, "timestamp": "2020-10-31T10:00:00Z" }

2.0. call to "spend points" route:

	{ "points": 5000 }

2.1. response from "spend points" call:

	[
		{ "payer": "DANNON", "points": -100 },
		{ "payer": "UNILEVER", "points": -200 },
		{ "payer": "MILLER COORS", "points": -4,700 }
	]

3.0. call to "points balance" route after the spend call
3.1. response from "points balance" call:

	{
		"DANNON": 1000,
		"UNILEVER": 0,
		"MILLER COORS": 5300
	}

*/

------

-> whole sequence ->

MacBook-Air:GoFetch matthewgarvin$ docker build -t points .
[+] Building 8.1s (15/15) FINISHED                                                                            
 => [internal] load build definition from Dockerfile                                                     0.0s
 => => transferring dockerfile: 887B                                                                     0.0s
 => [internal] load .dockerignore                                                                        0.0s
 => => transferring context: 2B                                                                          0.0s
 => [internal] load metadata for docker.io/library/golang:1.15-alpine                                    1.4s
 => [auth] library/golang:pull token for registry-1.docker.io                                            0.0s
 => [build 1/7] FROM docker.io/library/golang:1.15-alpine@sha256:a025015951720f3227acd51b0a99a71578b574  0.0s
 => [internal] load build context                                                                        0.1s
 => => transferring context: 12.33kB                                                                     0.1s
 => CACHED [build 2/7] RUN apk update && apk add --no-cache git ca-certificates gcc musl-dev             0.0s
 => CACHED [build 3/7] RUN mkdir -p /go/src/github.com/mattgarvin1/GoFetch                               0.0s
 => CACHED [build 4/7] WORKDIR /go/src/github.com/mattgarvin1/GoFetch                                    0.0s
 => [build 5/7] COPY . .                                                                                 0.1s
 => [build 6/7] WORKDIR /go/src/github.com/mattgarvin1/GoFetch/points                                    0.1s
 => [build 7/7] RUN go build -ldflags "-linkmode external -extldflags -static" -o /points                5.2s
 => CACHED [stage-1 1/2] COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certifi  0.0s 
 => CACHED [stage-1 2/2] COPY --from=build /points /                                                     0.0s 
 => exporting to image                                                                                   0.0s 
 => => exporting layers                                                                                  0.0s
 => => writing image sha256:f5daf58f2fa6a25df19134586f2bf1911b71ccd69cc07ec7a4c533b2b42db95f             0.0s
 => => naming to docker.io/library/points                                                                0.0s
MacBook-Air:GoFetch matthewgarvin$ docker run -d -p 8080:8080 points
94fdf5c9d05a8f0526f2ea01e7ca875f90360a8658885efaaffefb935fd4a51e
MacBook-Air:GoFetch matthewgarvin$ cd testData/
MacBook-Air:testData matthewgarvin$ curl http://localhost:8080/points/_status
{
    "status": "healthy"
}
MacBook-Air:testData matthewgarvin$ curl -X POST -d "@txList.json" http://localhost:8080/points/addTransactions
{
    "nTX": "5",
    "result": "success"
}
MacBook-Air:testData matthewgarvin$ curl -X POST -d "@spendOrder.json" http://localhost:8080/points/spend
[
    {
        "payer": "DANNON",
        "points": -100
    },
    {
        "payer": "UNILEVER",
        "points": -200
    },
    {
        "payer": "MILLER COORS",
        "points": -4700
    }
]
MacBook-Air:testData matthewgarvin$ curl http://localhost:8080/points/payerBalance
{
    "DANNON": 1000,
    "MILLER COORS": 5300,
    "UNILEVER": 0
}
MacBook-Air:testData matthewgarvin$ 

<- whole sequence <-

-> container logs ->

2021/03/12 15:49:28 Fetch Points Server serving at :8080

172.17.0.1 - - [12/Mar/2021:15:49:52 +0000] "GET /points/_status HTTP/1.1" 200 28 "" "curl/7.64.1"

172.17.0.1 - - [12/Mar/2021:15:50:06 +0000] "POST /points/addTransactions HTTP/1.1" 200 44 "" "curl/7.64.1"

172.17.0.1 - - [12/Mar/2021:15:50:27 +0000] "POST /points/spend HTTP/1.1" 200 201 "" "curl/7.64.1"

172.17.0.1 - - [12/Mar/2021:15:50:39 +0000] "GET /points/payerBalance HTTP/1.1" 200 68 "" "curl/7.64.1"

<- container logs <- 

----
